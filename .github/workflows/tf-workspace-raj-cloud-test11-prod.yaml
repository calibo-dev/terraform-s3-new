name: Terraform-Workspace-Raj_Cloud_Test11-Prod
on:
  workflow_dispatch:
    inputs:
      action:
        description: Action to perform
        required: true
        default: PLAN
        type: string
jobs:
  terraform-execution:
    runs-on: ${{ vars.RUNNER_NAME_Prod }}
    environment:
      name: Prod
    env:
      TF_IMAGE: hashicorp/terraform
    steps:
      - name: Initialization
        run: |
          JSON_STRING='${{ vars.TF_CLOUD_METADATA_69377F41_1A64_46F1_8CF1_2107F6E462D4 }}'         
          echo "TF_VERSION=$(echo "$JSON_STRING" | jq -r '.terraformVersion')" >> "$GITHUB_ENV"
          echo "ACTION=${{ inputs.action }}" >> "$GITHUB_ENV"          
          # AWS related variables
          echo "TERRAFORM_ORGANIZATION=$(echo "$JSON_STRING" | jq -r '.tfOrganization')" >> "$GITHUB_ENV"
          echo "TERRAFORM_WORKSPACE=$(echo "$JSON_STRING" | jq -r '.tfWorkspace')" >> "$GITHUB_ENV"
          echo "SENSITIVE_TF_VARIABLES_SECRET=$(echo "$JSON_STRING" | jq -r '.sensitiveTFVariableSecret')" >> "$GITHUB_ENV"
          echo "TERRAFORM_CLOUD_TOKEN_SECRET=$(echo "$JSON_STRING" | jq -r '.tfCloudTokenSecret')" >> "$GITHUB_ENV"
          echo "TF_CLOUD_TOKEN_FILE_SECRET=$(echo "$JSON_STRING" | jq -r '.tfCloudFileSecret')" >> "$GITHUB_ENV"
          echo "TF_ROOT_DIR=$(echo "$JSON_STRING" | jq -r '.tfRootDir')" >> "$GITHUB_ENV"
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Create cloud block if not present
        if: ${{ steps.check_version.outputs.is_newer == 'true' }} and ${{ steps.check_cloud_block.outputs.cloud_present == 'false' }}
        run: |
          set +e
          # Handle TF_ROOT_DIR: if empty or ".", stay in current directory, otherwise cd to specified directory
          if [[ -z "${{ env.TF_ROOT_DIR }}" || "${{ env.TF_ROOT_DIR }}" == "." ]]; then
            echo "Using current directory for Terraform files"
          else
            if [[ -d "${{ env.TF_ROOT_DIR }}" ]]; then
              echo "Changing to directory: ${{ env.TF_ROOT_DIR }}"
              cd "${{ env.TF_ROOT_DIR }}"
            else
              echo "::error::Directory specified in TF_ROOT_DIR does not exist: ${{ env.TF_ROOT_DIR }}"
              exit 1
            fi
          fi
          # Check if TF_VERSION is greater than or equal to 1.1.0
          if [ "$(printf '%s\n' "1.1.0" "${{ env.TF_VERSION }}" | sort -V | head -n1)" = "1.1.0" ]; then
            echo "Terraform version $TF_VERSION is greater than 1.1.0"
            export "is_newer=true" 
            export tf_block="cloud {"
          else
            echo "Terraform version $TF_VERSION is older than 1.1.0"
            export "is_newer=false"
            export tf_block="workspaces {"
          fi
          # Check if cloud block exists in any terraform files
          if grep -qE "${tf_block}" *.tf 2>/dev/null; then
            echo "Cloud Block present in terraform files"
            export cloud_present=true
          else
            echo "Cloud Block not present in terraform files"
            export cloud_present=false
          fi
          if [[ "$is_newer" = "true"  &&  "$cloud_present" = "false" ]]; then
            echo -e "terraform { \\n   cloud { \\n     organization = REPLACE_ORGANIZATION \\n     workspaces { \\n       name = REPLACE_WORKSPACE \\n     } \\n   } \\n }   " > tf-cloud.tf
            sed -i "s+REPLACE_ORGANIZATION+\"$TERRAFORM_ORGANIZATION\"+g" tf-cloud.tf
            sed -i "s+REPLACE_WORKSPACE+\"$TERRAFORM_WORKSPACE\"+g" tf-cloud.tf
            cat tf-cloud.tf
          elif [[ "$is_newer" = "false"  &&  "$cloud_present" = "false" ]]; then
            echo -e "terraform { \\n   backend  \"remote\" { \\n     organization = "REPLACE_ORGANIZATION" \\n     workspaces { \\n       name = "REPLACE_WORKSPACE" \\n     } \\n   } \\n } "  > tf-cloud.tf
            sed -i "s+REPLACE_ORGANIZATION+\"$TERRAFORM_ORGANIZATION\"+g" tf-cloud.tf
            sed -i "s+REPLACE_WORKSPACE+\"$TERRAFORM_WORKSPACE\"+g" tf-cloud.tf
            cat tf-cloud.tf
          fi
          #creating credentials file 
          echo "Creating Credentials file"
          mkdir -p ~/.terraform.d
          #echo '{ "credentials": { "app.terraform.io": { "token": "'${{ secrets[env.TERRAFORM_CLOUD_TOKEN_SECRET] }}'" } } }' > ~/.terraform.d/credentials.tfrc.json
          echo '${{ secrets[env.TF_CLOUD_TOKEN_FILE_SECRET] }}' | base64 -d > ~/.terraform.d/credentials.tfrc.json
          cat ~/.terraform.d/credentials.tfrc.json
      - name: Terraform Initialization
        run: |
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -v ~/.terraform.d:/root/.terraform.d \
            -w /app \
            hashicorp/terraform:$TF_VERSION init

            
      - name: Terraform Validate
        run: |
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            hashicorp/terraform:$TF_VERSION validate
      - name: Terraform Plan
        if: env.ACTION == 'plan' || env.ACTION == 'apply' || env.ACTION == 'destroy'
        run: |
          echo "*****TERRAFORM_PLAN_OUTPUT_START*****"
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -v ~/.terraform.d:/root/.terraform.d \
            -w /app \
            hashicorp/terraform:$TF_VERSION plan -no-color
          echo "*****TERRAFORM_PLAN_OUTPUT_END*****"
      - name: Terraform Apply
        if: env.ACTION == 'apply'
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES hashicorp/terraform:$TF_VERSION apply $TF_VARIABLES ${{ secrets[env.SENSITIVE_TF_VARIABLES_SECRET] }} -no-color -auto-approve"
          echo "*****TERRAFORM_APPLY_OUTPUT_START*****"
          docker run --user root --rm\
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -v ~/.terraform.d:/root/.terraform.d \
            -w /app \
            hashicorp/terraform:$TF_VERSION apply -no-color -auto-approve
          echo "*****TERRAFORM_APPLY_OUTPUT_END*****"
      - name: Terraform Destroy
        if: env.ACTION == 'destroy'
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES hashicorp/terraform:$TF_VERSION apply -destroy $TF_VARIABLES ${{ secrets[env.SENSITIVE_TF_VARIABLES_SECRET] }} -no-color -auto-approve"
          echo "*****TERRAFORM_DESTROY_OUTPUT_START*****"
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -v ~/.terraform.d:/root/.terraform.d \
            -w /app \
            hashicorp/terraform:$TF_VERSION apply -destroy -no-color -auto-approve
          echo "*****TERRAFORM_DESTROY_OUTPUT_END*****"
      - name: Terraform State
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES -e TF_LOG=off hashicorp/terraform:$TF_VERSION state pull"
          echo "*****TERRAFORM_GET_STATE_FILE_OUTPUT_START*****"
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -v ~/.terraform.d:/root/.terraform.d \
            -w /app \
            hashicorp/terraform:$TF_VERSION state pull  > state.txt|| true
          cat state.txt
          echo "*****TERRAFORM_GET_STATE_FILE_OUTPUT_END*****"
