name: Terraform-Standalone-##EXECUTION-NAME##-Prod
on:
  workflow_dispatch:
    inputs:
      action:
        description: Action to perform
        required: true
        default: PLAN
        type: string
jobs:
  terraform-execution:
    runs-on: ${{ vars.RUNNER_NAME_Prod }}
    environment:
      name: Prod
    env:
      TF_IMAGE: hashicorp/terraform
    steps:
      - name: Initialization
        run: |
          JSON_STRING='${{ vars.TF_METADATA }}'         
          echo "TF_VERSION=$(echo "$JSON_STRING" | jq -r '.terraformVersion')" >> "$GITHUB_ENV"
          echo "ACTION=${{ inputs.action }}" >> "$GITHUB_ENV"          
          # AWS related variables
          echo "AWS_REGION=$(echo "$JSON_STRING" | jq -r '.awsRegion')" >> "$GITHUB_ENV"
          echo "AWS_KEYS_SECRET_ID=$(echo "$JSON_STRING" | jq -r '.awsKeysSecretId')" >> "$GITHUB_ENV"
          echo "AWS_SECRET_SECRET_ID=$(echo "$JSON_STRING" | jq -r '.awsSecretSecretId')" >> "$GITHUB_ENV"
          echo "AWS_SESSION_SECRET_ID=$(echo "$JSON_STRING" | jq -r '.awsSessionSecretId')" >> "$GITHUB_ENV"
          echo "TF_VARIABLES=$(echo "$JSON_STRING" | jq -r '.tfVariables')" >> "$GITHUB_ENV"
          echo "ENVIRONMENT_VARIABLES=$(echo "$JSON_STRING" | jq -r '.environmentVariables')" >> "$GITHUB_ENV"
          echo "SENSITIVE_TF_VARIABLES_SECRET=$(echo "$JSON_STRING" | jq -r '.sensitiveTFVariableSecret')" >> "$GITHUB_ENV"
          echo "SENSITIVE_ENV_VARIABLES_SECRET=$(echo "$JSON_STRING" | jq -r '.sensitiveENVVariableSecret')" >> "$GITHUB_ENV"
          echo "TF_ROOT_DIR=$(echo "$JSON_STRING" | jq -r '.tfRootDir')" >> "$GITHUB_ENV"
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Terraform Initialization
        run: |
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            -e AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_KEYS_SECRET_ID] }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets[env.AWS_SECRET_SECRET_ID] }} \
            -e AWS_SESSION_TOKEN=${{ secrets[env.AWS_SESSION_SECRET_ID] }} \
            -e AWS_DEFAULT_REGION=$AWS_REGION \
            hashicorp/terraform:$TF_VERSION init
      - name: Terraform Validate
        run: |
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            -e AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_KEYS_SECRET_ID] }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets[env.AWS_SECRET_SECRET_ID] }} \
            -e AWS_SESSION_TOKEN=${{ secrets[env.AWS_SESSION_SECRET_ID] }} \
            -e AWS_DEFAULT_REGION=$AWS_REGION \
            hashicorp/terraform:$TF_VERSION validate
      - name: Terraform Plan
        if: env.ACTION == 'plan' || env.ACTION == 'apply' || env.ACTION == 'destroy'
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES hashicorp/terraform:$TF_VERSION plan $TF_VARIABLES ${{ secrets[env.SENSITIVE_TF_VARIABLES_SECRET] }} -no-color -out 'output'"
          echo "*****TERRAFORM_PLAN_OUTPUT_START*****"
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            -e AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_KEYS_SECRET_ID] }}  \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets[env.AWS_SECRET_SECRET_ID] }} \
            -e AWS_SESSION_TOKEN=${{ secrets[env.AWS_SESSION_SECRET_ID] }} \
            -e AWS_DEFAULT_REGION=$AWS_REGION \
            ${{ secrets[env.SENSITIVE_ENV_VARIABLES_SECRET] }} \
            $TF_COMMAND
          echo "*****TERRAFORM_PLAN_OUTPUT_END*****"
      - name: Terraform Apply
        if: env.ACTION == 'apply'
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES hashicorp/terraform:$TF_VERSION apply $TF_VARIABLES ${{ secrets[env.SENSITIVE_TF_VARIABLES_SECRET] }} -no-color -auto-approve"
          echo "*****TERRAFORM_APPLY_OUTPUT_START*****"
          docker run --user root --rm\
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            -e AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_KEYS_SECRET_ID] }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets[env.AWS_SECRET_SECRET_ID] }} \
            -e AWS_SESSION_TOKEN=${{ secrets[env.AWS_SESSION_SECRET_ID] }} \
            -e AWS_DEFAULT_REGION=$AWS_REGION \
            ${{ secrets[env.SENSITIVE_ENV_VARIABLES_SECRET] }} \
            $TF_COMMAND
          echo "*****TERRAFORM_APPLY_OUTPUT_END*****"
      - name: Terraform Destroy
        if: env.ACTION == 'destroy'
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES hashicorp/terraform:$TF_VERSION apply -destroy $TF_VARIABLES ${{ secrets[env.SENSITIVE_TF_VARIABLES_SECRET] }} -no-color -auto-approve"
          echo "*****TERRAFORM_DESTROY_OUTPUT_START*****"
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            -e AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_KEYS_SECRET_ID] }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets[env.AWS_SECRET_SECRET_ID] }} \
            -e AWS_SESSION_TOKEN=${{ secrets[env.AWS_SESSION_SECRET_ID] }} \
            -e AWS_DEFAULT_REGION=$AWS_REGION \
            ${{ secrets[env.SENSITIVE_ENV_VARIABLES_SECRET] }} \
            $TF_COMMAND
          echo "*****TERRAFORM_DESTROY_OUTPUT_END*****"
      - name: Terraform State
        run: |
          export TF_COMMAND="$ENVIRONMENT_VARIABLES -e TF_LOG=off hashicorp/terraform:$TF_VERSION state pull"
          echo "*****TERRAFORM_GET_STATE_FILE_OUTPUT_START*****"
          docker run --user root --rm \
            -v "$PWD"/"$TF_ROOT_DIR":/app \
            -w /app \
            -e AWS_ACCESS_KEY_ID=${{ secrets[env.AWS_KEYS_SECRET_ID] }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets[env.AWS_SECRET_SECRET_ID] }} \
            -e AWS_SESSION_TOKEN=${{ secrets[env.AWS_SESSION_SECRET_ID] }} \
            -e AWS_DEFAULT_REGION=$AWS_REGION \
            ${{ secrets[env.SENSITIVE_ENV_VARIABLES_SECRET] }} \
            $TF_COMMAND  > state.txt|| true
          cat state.txt
          echo "*****TERRAFORM_GET_STATE_FILE_OUTPUT_END*****"
